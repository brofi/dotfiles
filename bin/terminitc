#!/bin/bash
#
# Reads color definitions from the X server resource database (if a display is
# available) or from the Xresources file (if no display is available) and
# initializes the first 16 colors of a terminal. If the colors are read from the
# Xresources file manually, only includes inside the Xresources file itself are
# supported. Currently supported terminals are 'linux' and 'fbterm. We don't use
# 'tput initc' to initialize color #1 to (#2,#3,#4), since the ranges of these
# colors are terminal-dependent (see 'terminfo'). For the linux terminal we
# would've to multiply the decimal red, green and blue value with 1000 and
# divide by 255 (see 'infocmp linux | grep initc'). For fbterm the range is
# 0-255. Since 'tput initc' is terminal-dependent we just use the escape codes.
#
# OPTIONS
#   --print    Print out (don't interpret) initc escape sequence

if [ "$1" != '--print' ] && [ "$TERM" != "fbterm" ] && [ "$TERM" != "linux" ]; then
    exit 0
fi

# Matches color definitions and remembers the color number and the hexadecimal
# rgb string after '#' (for use with sed).
colorP='.*color\([0-9]\{1,2\}\)[[:blank:]]*:[[:blank:]]*#\([[:xdigit:]]\{6\}$\)'

# Get colors with xrdb -query {{{
# $1 diplay for xrdb.
function get_colors_xrdb {
    [ -S /tmp/.X11-unix/X0 ] || return 1

    _IFS=$IFS; IFS=$'\n'
    # Get color definitions in format n:x , n <- [0-9]{1,2}, x <- [[:xdigit:]]{6}.
    colors=($(xrdb -query -display ':0' | sed -n 's/'"$colorP"'/\1:\2/p'))
    IFS=$_IFS
}
# }}}

# Get colors manually {{{
# $1 Path to the Xresources file
function get_colors_manually {
    [ -f "$1" ] || exit 1

    xres_tmp=$(mktemp "/tmp/$(basename "$1").XXXXXXXXXX") || exit 1
    cp "$1" "$xres_tmp"

    # Xresources include prefix pattern.
    local inclPP='^[[:blank:]]*#[[:blank:]]*include[[:blank:]]*["<]\{1\}'
    # Xresources include suffix pattern.
    local inclSP='[">]\{1\}'

    _IFS=$IFS; IFS=$'\n'
    # Get all Xresources include filenames.
    includes=($(sed -n 's/'"$inclPP"'\(.*\)'"$inclSP"'/\1/p' "$xres_tmp"))
    IFS=$_IFS

    # Replace include statements with file contents.
    for i in "${includes[@]}"; do
        # $i could be a relative path.
        pi="$i"
        [ -f "$pi" ] || pi="$(cd "$(dirname "$1")" && pwd)/$i"
        # Use '_' as a delimiter since $i might include slashes.
        sed -e '\_'"${inclPP}${i}${inclSP}"'_{
            r '"$pi"'
            d
        }' -i "$xres_tmp"
    done
    unset i pi

    # TODO check for new includes.

    local defineP='^[[:blank:]]*#[[:blank:]]*define[[:blank:]]\+\([[:alnum:]_]\+\)[[:blank:]]\+\(.*\)'
    _IFS=$IFS; IFS=$'\n'
    # Get all Xresources define statements in format 'name value'.
    defines=($(sed -n 's/'"$defineP"'/\1 \2/p' "$xres_tmp"))
    IFS=$_IFS

    # Remove define statements.
    sed -i '/'"$defineP"'/ d' "$xres_tmp"

    # We could have define statements like:
    # #define BACKROUND2 #000000
    # #define BACKROUND BACKGROUND2
    local flattened=false
    while ! $flattened; do
        flattened=true
        for i in "${!defines[@]}"; do
            local val=${defines[$i]##* }
            local name=${defines[$i]%% *}
            # If the define value occurs as a name in the list of defines,
            # replace the value with the new found value.
            for j in "${!defines[@]}"; do
                if [ "$val" = "${defines[$j]%% *}" ]; then
                    defines[$i]="$name ${defines[$j]##* }"
                    flattened=false
                fi
            done
        done
    done

    # Replace all define names with their value.
    for d in "${defines[@]}"; do
        local val=${d##* }
        local name=${d%% *}
        sed -i 's/\(.*:[[:blank:]]*\)'"$name"'\(.*\)/\1'"$val"'\2/' "$xres_tmp"
    done

    # Remove comments, then trailing tabs and spaces, then empty lines and leave
    # only color definitions in format n:x , n <- [0-9]{1,2}, x <- [[:xdigit:]]{6}.
    sed -n \
        -e 's/!.*//' \
        -e 's/[[:blank:]]*$//' \
        -e '/^$/ d' \
        -e 's/'"$colorP"'/\1:\2/p' \
        -i "$xres_tmp"

    _IFS=$IFS; IFS=$'\n'
    # We reverse the file before selecting unique color numbers, since a subsequent
    # color definition overrides a previous one.
    colors=($(tac "$xres_tmp" | sort -n -t: -u -k1,1))
    IFS=$_IFS
}
# }}}

if ! get_colors_xrdb; then
    get_colors_manually ~/.Xresources
fi

unset colorP

# Initialize terminal colors
for i in "${colors[@]}"; do
    c=${i#*:}
    n=${i%:*}
    r="0x${c: :2}"
    g="0x${c:2:2}"
    b="0x${c: -2}"
    initc_fbterm+=$(printf '\\033[3;%d;%d;%d;%d}' "$n" "$r" "$g" "$b")
    initc_linux+=$(printf '\\033]P%x%x%x%x' "$n" "$r" "$g" "$b")
done

if [ "$1" = '--print' ]; then
    printf 'fbterm:\n%s\n' "$initc_fbterm"
    printf '\n'
    printf 'linux:\n%s\n' "$initc_linux"
elif [ "$TERM" = "fbterm" ]; then
    printf '%b' "$initc_fbterm"
elif [ "$TERM" = "linux" ]; then
    # Add linux clear, otherwise only characters have a background
    initc_linux+='\033[H\033[J' # see: infocmp -1 linux | grep -o clear.*
    printf '%b' "$initc_linux"
fi

unset colors i c n r g b
unset initc_fbterm initc_linux
unset -f get_colors_xrdb get_colors_manually

# vim: set fdm=marker:
