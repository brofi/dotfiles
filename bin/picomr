#!/bin/bash
#
# A picom wrapper adding a rounded corner exclusion for windows occupying the
# whole screen respecting docks and multiple displays with varying resolutions
# and alignment.

usage() {
    echo "usage: picomr [OPTIONS] [WM_NAME of dock...]

OPTIONS:
    --no-docks
        Don't search for dock struts.

    --no-deep-search
        Don't search children of root recursively.

    --help
        Prints this help."
}

_debug=false
struts=()

# Find all child windows of root with _NET_WM_WINDOW_TYPE =
# _NET_WM_WINDOW_TYPE_DOCK and collect their _NET_WM_STRUT_PARTIAL. Supplying
# the names of each dock vastly improves performance, since it results in way
# less xprop calls.
# $1: deep search
# ${@:2}: dock names (optional)
find_dock_struts() {
    command -v xprop >/dev/null || return 1
    command -v xwininfo >/dev/null || return 1

    local xwiarg='-tree'
    [ "${1:-true}" = false ] && xwiarg='-children'
    local names=("${@:2}")

    _log "Searching for ${names[*]:-dock} struts in 'xwininfo -root $xwiarg'...\n"

    namep='.*'
    if [ "${#names[@]}" -ge 1 ]; then
        namep='"\('"${names[0]}"
        for n in "${names[@]:1}"; do namep+="\\|$n"; done
        namep+='\)"'
    fi
    mapfile -t child_ids < <(xwininfo -root $xwiarg |
        sed -n 's/^[ \t]\+\(0x[[:xdigit:]]\+\) '"$namep"':.*/\1/p')

    local id strut
    for id in "${child_ids[@]}"; do
        if xprop -id "$id" _NET_WM_WINDOW_TYPE 2>/dev/null |
            grep -wq _NET_WM_WINDOW_TYPE_DOCK; then

            _log "\tFound dock: $id\n"
            IFS=", " read -ra strut <<< "$(xprop -id "$id" -notype _NET_WM_STRUT_PARTIAL |
                sed -n 's/^_NET_WM_STRUT_PARTIAL = \(.*\)/\1/p')"
            if [ ${#strut[@]} -ne 0 ]; then
                _log "\t\tFound strut: ${strut[*]}\n"
                struts=("${struts[@]}" "${strut[@]}")
            fi
        fi
    done
    _log "...done\n"
}

_log() {
    if [ $_debug = true ]; then
        echo -ne "$1"
    fi
}

_tostr() {
    case $1 in
        0) printf "left";;
        1) printf "right";;
        2) printf "top";;
        3) printf "bottom";;
        4) printf "left_start_y";;
        5) printf "left_end_y";;
        6) printf "right_start_y";;
        7) printf "right_end_y";;
        8) printf "top_start_x";;
        9) printf "top_end_x";;
        10) printf "bottom_start_x";;
        11) printf "bottom_end_x";;
    esac
}

case "$1" in
    --no-docks) no_docks=true;;
    --no-deep-search) deep_search=false; shift;;
    --help) usage; exit 0;;
esac
[ "$no_docks" = true ] || find_dock_struts "${deep_search:-true}" "$@"

_log "\nGet dimension of displays..."
mapfile -t dimen < <(xrandr --current |
    sed -n "s/^.*connected.*[[:space:]]\([0-9]\+x[0-9]\++[0-9]\++[0-9]\+\).*/\1/p")
_log "done\n"

_log "Get screen size..."
ssize=$(xrandr --current | sed -n 's/Screen 0:.*current \([0-9]\+ x [0-9]\+\),.*/\1/p')
swidth="${ssize% x*}"
sheight="${ssize#*x }"
_log "done\n"

_log "\nAdd exclusions to picom command...\n"
picomcmd="picom -b "
for d in "${dimen[@]}"; do
    _log "\tFor display dimension $d:\n"
    res="${d%%+*}"; res=("${res%x*}" "${res#*x}")
    pos="${d#*+}"; pos=("${pos%+*}" "${pos#*+}")
    offs=(0 0 0 0)
    i=0
    _log "\tGather offsets from struts...\n"
    # For all _NET_WM_STRUT_PARTIAL
    while [ "$i" -lt $((${#struts[@]}/12)) ]; do
        _log "\t\tChecking strut$i: ${struts[*]:((i*12)):12}...\n"
        j=0
        while [ "$j" -lt 4 ]; do
            s=${struts[((i * 12 + j))]} # left/right/top/bottom
            ss=${struts[((i * 12 + j * 2 + 4))]} # start
            se=${struts[((i * 12 + j * 2 + 5))]} # end
            _log "\t\t\t$(_tostr $j): $s, $(_tostr $((j * 2 + 4))): $ss, $(_tostr $((j * 2 + 5))): $se\n"
            if [ "$s" -eq 0 ]; then
                _log "\t\t\t\t-> no reserved area\n"
            else
                # For left and right strut check if start_y and end_y are on
                # this display. For top and bottom strut check if start_x and
                # end_x are on this display.
                idx=$(((4-j-1)/2))
                if [ "$ss" -ge "${pos[$idx]}" ] && [ "$se" -le $((pos[idx]+res[idx])) ];then
                    _log "\t\t\t\t-> within display dimension"
                    if [ "$s" -gt "${offs[j]}" ]; then
                        offs[j]="$s"
                        _log " -> new offsets: ${offs[*]}\n"
                    else
                        _log " -> offsets unchanged\n"
                    fi
                else
                    _log "\t\t\t\t-> outside of display dimension\n"
                fi
            fi
            ((j++))
        done
        ((i++))
        _log "\t\t...done\n"
    done
    _log "\t...done\n"
    _log "\tGathered offsets: ${offs[*]}\n"
    # Window is maxed out horizontally on display
    c="\"x = $((offs[0]>0?offs[0]:pos[0])) && x2 = $((offs[1]>0?swidth-offs[1]:pos[0]+res[0])) &&"
    # Window is maxed out vertically on display
    c="$c y = $((offs[2]>0?offs[2]:pos[1])) && y2 = $((offs[3]>0?sheight-offs[3]:pos[1]+res[1]))\""
    picomcmd="$picomcmd --rounded-corners-exclude $c"
    _log "\tAdding picom exclusion: $c\n"
done
_log "...done\n"

_log "Starting picom with:\n$picomcmd"
eval "$picomcmd" >/dev/null 2>&1 || exit 1
